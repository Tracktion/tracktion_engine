name: Build
on:
  schedule:
    - cron: '* 0 * * *'
  push:
  workflow_dispatch:

env:
  BUILD_CONFIG: Release
  BUILD_DIR: build

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
          name: [ linux, macOS, windows ]
          target: [ DemoRunner, TestRunner, Benchmarks, EngineInPluginDemo ]
          run_target: [ true ]
          include:
            - name: linux
              os: linux-latest
            - name: macOS
              os: macos-latest
              generator: "-G Xcode"
            - name: windows
              os: windows-latest
            - target: EngineInPluginDemo
              run_target: false

    runs-on: ${{ matrix.os }}
    steps:
      # Install dependencies
      - name: Install dependencies
        if: ${{ matrix.platform == 'linux' }}
        run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install -y gcc-11 g++-11 freeglut3-dev g++ libasound2-dev libcurl4-openssl-dev libfreetype6-dev libjack-jackd2-dev libx11-dev libxcomposite-dev libxcursor-dev libxinerama-dev libxrandr-dev mesa-common-dev ladspa-sdk webkit2gtk-4.0 libgtk-3-dev xvfb

      - uses: actions/checkout@v3
        with:
          submodules: true

      # Setup Environment Variables
      - name: Setup Environment Variables
        shell: bash
        run: |
          pwd
          ls -la
          VERSION=$(cat VERSION.md)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "APP_DIR=${{ env.BUILD_DIR }}/examples/${{ matrix.target }}/${{ matrix.target }}_artefacts/${{ env.BUILD_CONFIG }}" >> $GITHUB_ENV

          if [ ${{ matrix.platform == 'DemoRunner' }} ]; then
            if [ ${{ matrix.platform == 'linux' }} ]; then
              echo "APP_EXE=${{ matrix.target }}" >> $GITHUB_ENV
            elif [ ${{ matrix.platform == 'macOS' }} ]; then
              echo "APP_EXE=${{ matrix.target }}/Contents/MacOS/${{ matrix.target }}" >> $GITHUB_ENV
            elif [ ${{ matrix.platform == 'windows' }} ]; then
              echo "APP_EXE=${{ matrix.target }}.exe" >> $GITHUB_ENV
            fi
          elif [ ${{ matrix.platform == 'TestRunner' }} ] || [ ${{ matrix.platform == 'Benchmarks' }} ]; then
            if [ ${{ matrix.platform == 'linux' }} ] || [ ${{ matrix.platform == 'macOS' }} ]; then
              echo "APP_EXE=${{ matrix.target }}" >> $GITHUB_ENV
            elif [ ${{ matrix.platform == 'windows' }} ]; then
              echo "APP_EXE=${{ matrix.target }}.exe" >> $GITHUB_ENV
            fi
          fi

      # Generate build files
      - name: "Generate Build Files"
        shell: bash
        run: |
          cmake -B ${{ env.BUILD_DIR }} ${{ matrix.generator }}

      # Build products
      - name: "Build products"
        shell: bash
        run: |
          if [[ "$OSTYPE" == "linux-gnu" ]]; then
            export DISABLE_VALGRIND=1
            export CC=/usr/bin/gcc-11
            export CXX=/usr/bin/g++-11
            gcc -v
            g++ -v
          fi

          cd build
          cmake --build . --target ${{ matrix.target }} --config ${{ env.BUILD_CONFIG }} --parallel 4

      # Run products
      - name: "Run products"
        if: ${{ matrix.run_target }}
        shell: bash
        env:
          BM_API_KEY: ${{ secrets.BM_API_KEY }}
        run: |
          cd ${{ env.APP_DIR }}
          ${{ env.APP_EXE }}

      # Upload test results
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test_results_${{ matrix.name }}
          path: ./bin/test_results/**/TEST-*.xml

  # build_and_test_tooled:
  #   if: github.event_name == 'schedule'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - name: macOS ASan
  #           os: macos-latest
  #           platform: mac
  #           asan: true
  #         - name: macOS TSan
  #           os: macos-latest
  #           platform: mac
  #           tsan: true
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Install dependencies
  #       if: ${{ matrix.platform == 'linux' }}
  #       run: |
  #           sudo add-apt-repository ppa:ubuntu-toolchain-r/test
  #           sudo apt-get update
  #           sudo apt-get install -y gcc-11 g++-11 freeglut3-dev g++ libasound2-dev libcurl4-openssl-dev libfreetype6-dev libjack-jackd2-dev libx11-dev libxcomposite-dev libxcursor-dev libxinerama-dev libxrandr-dev mesa-common-dev ladspa-sdk webkit2gtk-4.0 libgtk-3-dev xvfb

  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true

  #     - name: "Build products"
  #       shell: bash
  #       env:
  #         ENABLE_ASAN: ${{ matrix.asan }}
  #         ENABLE_TSAN: ${{ matrix.tsan }}
  #       run: |
  #         if [[ "$OSTYPE" == "linux-gnu" ]]; then
  #           export DISABLE_VALGRIND=1
  #           export CC=/usr/bin/gcc-11
  #           export CXX=/usr/bin/g++-11
  #           gcc -v
  #           g++ -v
  #         fi

  #         if [[ "$ENABLE_ASAN" == "true" ]]; then
  #           export ENABLE_ASAN=1
  #         fi

  #         if [[ "$ENABLE_TSAN" == "true" ]]; then
  #           export ENABLE_TSAN=1
  #         fi

  #         export DISABLE_BUILD=1
  #         ./tests/build

  # static_analysis:
  #   if: github.event_name == 'schedule'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - name: macOS Static Analyser
  #           os: macos-latest
  #           platform: mac
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Install dependencies
  #       if: ${{ matrix.platform == 'linux' }}
  #       run: |
  #           sudo add-apt-repository ppa:ubuntu-toolchain-r/test
  #           sudo apt-get update
  #           sudo apt-get install -y gcc-11 g++-11 freeglut3-dev g++ libasound2-dev libcurl4-openssl-dev libfreetype6-dev libjack-jackd2-dev libx11-dev libxcomposite-dev libxcursor-dev libxinerama-dev libxrandr-dev mesa-common-dev ladspa-sdk webkit2gtk-4.0 libgtk-3-dev xvfb

  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true

  #     - name: "Build products"
  #       shell: bash
  #       env:
  #         ENABLE_STATIC_ANALYSER: ${{ matrix.static_analyser }}
  #       run: |
  #         if [[ "$OSTYPE" == "linux-gnu" ]]; then
  #           export DISABLE_VALGRIND=1
  #           export CC=/usr/bin/gcc-11
  #           export CXX=/usr/bin/g++-11
  #           gcc -v
  #           g++ -v
  #         fi

  #         export ENABLE_STATIC_ANALYSER=1
  #         export DISABLE_BUILD=1

  #         ./tests/build

  # # Upload test results
  # deploy:
  #   if: always()
  #   needs: build_and_test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Get Artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: ./

  #     - name: Display structure of downloaded files
  #       run: ls -la
    
  #     - name: Publish Unit Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v1.6
  #       with:
  #         check_name: Unit Test Results
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         files: ./**/TEST-*.xml

  #     - name: Publish Performance Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v1.6
  #       with:
  #         check_name: Performance Test Results
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         files: ./**/TEST-*PerformanceTests*.xml
