/*
    ,--.                     ,--.     ,--.  ,--.
  ,-'  '-.,--.--.,--,--.,---.|  |,-.,-'  '-.`--' ,---. ,--,--,      Copyright 2018
  '-.  .-'|  .--' ,-.  | .--'|     /'-.  .-',--.| .-. ||      \   Tracktion Software
    |  |  |  |  \ '-'  \ `--.|  \  \  |  |  |  |' '-' '|  ||  |       Corporation
    `---' `--'   `--`--'`---'`--'`--' `---' `--' `---' `--''--'    www.tracktion.com

    Tracktion Engine uses a GPL/commercial licence - see LICENCE.md for details.
*/

namespace tracktion { inline namespace engine
{

//==============================================================================
/**
    SmartThumnail automatically tracks changes to an AudioFile and will update its
    cache if the file changes.
    Additionally, if this file is a wav proxy file that's being generated, you can
    use this to find out about its progress.
*/
class SmartThumbnail   : public TracktionThumbnail,
                         private juce::Timer
{
public:
    //==============================================================================
    /** Creates a SmartThumbnail for an AudioFile which will automatically repaint a
        Component as it it loaded.
        You can optionally supply and Edit to use its temporary directory for the
        thumbnail file storage.
    */
    SmartThumbnail (Engine& e, const AudioFile&, juce::Component& componentToRepaint, Edit*);

    /** Destructor. */
    ~SmartThumbnail() override;

    /** Enable/disable all smart thumbnail generation. */
    static void setEnabled (bool e)             { enabled = e; }

    /** Returns true if any thumbnails are currently being generated for the given Edit. */
    static bool areThumbnailsFullyLoaded (Engine&);

    //==============================================================================
    /** Sets a new file to display. */
    void setNewFile (const AudioFile&);

    /** Returns true if this is a proxy file being generated by the AudioProxyGenerator. */
    bool isGeneratingProxy() const noexcept     { return wasGeneratingProxy; }

    /** Returns the progress of the current proxy file creation. */
    float getProxyProgress() const noexcept     { return lastProgress; }

    /** Returns true if the file has been changed and a new thumbnail has not yet been generated. */
    bool isOutOfDate() const noexcept           { return thumbnailIsInvalid; }

    //==============================================================================
    /** @internal */
    void audioFileChanged();
    /** @internal */
    void releaseFile();

    //==============================================================================
    AudioFile file;
    Engine& engine;
    Edit* const edit = nullptr;

private:
    //==============================================================================
    juce::Component& component;
    bool wasGeneratingProxy = false;
    std::atomic<bool> thumbnailIsInvalid { true };
    float lastProgress = 0.0f;

    void timerCallback() override;
    void fileWasChanged();
    void createThumbnailReader();

    static bool enabled;

    JUCE_DECLARE_WEAK_REFERENCEABLE(SmartThumbnail)
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SmartThumbnail)
};

}} // namespace tracktion { inline namespace engine
